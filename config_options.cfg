[GLOBAL]
nn_threads  = int{1,no_cores} -> 4
det_threads = int{1,no_cores} -> 8
mode        = {detection, classification}
setmode     = {becker, voc, graz, caltech}
train_sel   = {bbox, segment}
randbg      = int{-2,-1,0,..} -> 0 (-1 = proportional to the cls size, -2 = all bg images)
tmp_dir     = rel_dir -> /local/vdvelden/sldet1beckerTUD_sift_tmp_...
res_dir     = rel_dir -> /local/vdvelden/sldet1beckerTUD_sift_res_...
train_set   = available from imset_path below -> tudtrain
val_set     = available from imset_path below -> tudbval (behmo-only)
test_set    = available from imset_path below -> tudtest
bg_train_set= available from imset_path below -> tudtrain

[VOC]
imset_path      = path with imset placeholder -> VOCdevkit/VOC2007/ImageSets/Main/%s.txt
image_path      = path with im_id placeholder -> VOCdevkit/VOC2007/JPEGImages/%s.jpg
annotation_path = path with im_id placeholder -> VOCdevkit/VOC2007/Annotations/%s.xml
gt_object_path  = path with im_id placeholder -> None
gt_class_path   = path with im_id placeholder -> VOCdevkit/VOC2007/SegmentationClass/%s.png
classes         = list of classes available in dataset (setmode) -> motorbike

[TRAIN-DESCRIPTOR]
dtype       = Descriptor Subclass{DescriptorUint8, Descriptor, RootSIFT, VL_DSift} -> DescriptorUint8
cache_dir   = rel_dir in tmp_dir -> descriptors
detector    = colorDescriptor detector{densesampling, harrislaplace} -> densesampling
descriptor  = colorDescriptor descriptor{sift, csift, opponentsift, rgbsift, rgsift} -> sift (only sift available in VL_DSift)
outputFormat = {binary, text} -> binary (much faster)
/* Optional for densesampling */
[ds_spacing  = int{1,..} -> 8]
[ds_scales   = float{0,..}[+float{0,..}*] -> 2.67+4.0+5.33]
/* Optional for harrislaplace */
...

[TEST-DESCRIPTOR]
dtype       = DescriptorUint8
cache_dir   = descriptors
detector    = densesampling
descriptor  = sift
ds_spacing  = 8
ds_scales   = 2.67+4.0+5.33
outputFormat = binary

[NBNN]
behmo       = {True, False} -> False
checks      = int -> 1000

[TEST]
k               = int{1,..} -> {1,5,10,20}
batch_size      = int{1,..} -> 100
img_pickle_path = rel_path in tmp_dir placeholder for batch no -> batches/%d.pkl

[DETECTION]
method            = {single_link, quickshift}
dist              = {overlap, euclidean, ..} -> overlap
hyp_threshold     = {nearest, ranked} -> nearest
ignore_threshold  = {True, False} -> False
hypothesis_metric = {bb_descr_qh, bb_energy, bb_wenergy, bb_fg, bb_bg, bb_qh, bb_uniform} -> bb_descr_qh
detection_metric  = {det_becker, det_energy, det_qh, det_qd, det_fg, det_bg} -> det_becker
distances_path    = rel_path in tmp_dir with placeholders for class & image -> distances/%s_%s.pkl
hypotheses_path   = rel_path in tmp_dir with placeholders for class & image -> hypotheses/%s_%s.pkl
exemplar_path     = rel_path in tmp_dir with placeholders for class -> exemplars/%s.npy
/* Optional for single_link */
[theta_m           = float{0,1} -> 0.8]
[theta_p           = float{0,1} -> 0.4]
/* Optional for quickshift */
[quickshift_tree_path = quickshift/%s_%s.pkl]
[tau               = float{1,..} -> 1.118]
